<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Present Game</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #e0f2fe; /* Lighter blue background */
            background-image: radial-gradient(at 50% 100%, rgba(255,255,255,0.2), transparent),
                              radial-gradient(at 0% 0%, rgba(255,255,255,0.1), transparent);
        }

        .present-box {
            background-color: #ef4444; /* Red */
            background-image: linear-gradient(to bottom right, #ef4444, #dc2626); /* Red gradient */
            border: 4px solid #b91c1c; /* Darker red border */
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.3), inset 0 0 15px rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.25rem; /* Larger number */
            font-weight: bold;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);
            padding: 1.5rem; /* Increase padding for larger feel */
            aspect-ratio: 1 / 1; /* Ensure square aspect ratio */
            border-radius: 12px; /* More rounded corners */
        }
        .present-box:hover {
            transform: translateY(-8px) scale(1.02); /* More noticeable hover effect */
            box-shadow: 0 20px 30px rgba(0, 0, 0, 0.4), inset 0 0 20px rgba(255, 255, 255, 0.3);
        }
        .present-box.opened {
            background-color: #6ee7b7; /* Green for opened */
            background-image: linear-gradient(to bottom right, #6ee7b7, #34d399); /* Green gradient */
            border-color: #059669; /* Darker green border */
            cursor: default;
            transform: translateY(0) scale(1);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1), inset 0 0 10px rgba(0, 0, 0, 0.1);
            color: #1a202c; /* Dark text for opened */
            animation: bounceIn 0.5s ease-out; /* Add bounce animation on open */
        }

        /* Keyframe animation for opening a present */
        @keyframes bounceIn {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.05); opacity: 1; }
            100% { transform: scale(1); }
        }

        .ribbon-h, .ribbon-v {
            position: absolute;
            background-color: #fcd34d; /* Gold */
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3), 0 1px 2px rgba(0, 0, 0, 0.2);
            z-index: 1;
        }
        .ribbon-h {
            top: 50%;
            left: 0;
            width: 100%;
            height: 25px; /* Thicker ribbon */
            transform: translateY(-50%);
        }
        .ribbon-v {
            top: 0;
            left: 50%;
            height: 100%;
            width: 25px; /* Thicker ribbon */
            transform: translateX(-50%);
        }
        .bow {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg); /* Rotated for a dynamic look */
            width: 50px; /* Larger bow */
            height: 50px; /* Larger bow */
            background-color: #fde047; /* Lighter Gold */
            border-radius: 50%;
            z-index: 2;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3), inset 0 0 10px rgba(255, 255, 255, 0.3);
        }
        .bow::before, .bow::after {
            content: '';
            position: absolute;
            width: 70%;
            height: 70%;
            background-color: #fbbf24; /* Even lighter gold */
            border-radius: 50%;
            z-index: 3;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .bow::before {
            top: -10%;
            left: -10%;
        }
        .bow::after {
            bottom: -10%;
            right: -10%;
        }


        /* Specific styles for reward/punishment text */
        .reward-text {
            color: #059669; /* Green */
        }
        .punishment-text {
            color: #dc2626; /* Red */
        }
        .message-box {
            min-height: 80px; /* Ensure consistent height */
        }
        .container-card {
            background-color: #ffffff;
            border-radius: 1rem; /* rounded-xl */
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1); /* shadow-lg */
            padding: 1.5rem; /* p-6 */
        }
        @media (min-width: 768px) { /* md:p-8 */
            .container-card {
                padding: 2rem;
            }
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center p-4">
    <div class="max-w-4xl w-full container-card space-y-6">
        <h1 class="text-3xl md:text-4xl font-bold text-center text-gray-800 mb-6">
            Present Challenge Game
        </h1>

        <!-- Presents Grid -->
        <div id="presents-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-5 md:gap-8">
            <!-- Presents will be generated here by JavaScript -->
        </div>

        <!-- Exercise & Feedback Area -->
        <div class="bg-blue-50 p-6 rounded-lg shadow-md border border-blue-200">
            <h2 class="text-2xl font-semibold text-blue-700 mb-4">
                Challenge Zone
            </h2>
            <div id="exercise-display" class="text-lg font-medium text-gray-700 min-h-[4rem] flex items-center justify-center p-2 bg-white rounded-md border border-gray-300">
                Click a present to reveal your challenge!
            </div>
            <div class="mt-4 flex flex-col sm:flex-row gap-3 justify-center">
                <button id="reveal-outcome-button"
                        class="px-8 py-3 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition duration-200 ease-in-out shadow-md
                                disabled:opacity-50 disabled:cursor-not-allowed text-lg">
                    Reveal Outcome
                </button>
            </div>
            <div id="feedback-display" class="message-box mt-4 text-center text-lg font-bold"></div>
        </div>

        <!-- Game Control Buttons -->
        <div class="flex flex-col sm:flex-row justify-center gap-4 pt-4">
            <button id="reset-button"
                    class="px-8 py-4 bg-purple-600 text-white text-xl font-bold rounded-lg hover:bg-purple-700 transition duration-200 ease-in-out shadow-lg">
                Reset Game
            </button>
        </div>
    </div>

    <script>
        // Game configuration and data
        const exercises = [
            // Word Formation Exercises
            { question: "What is the noun form of 'communicate'?", answer: "communication" },
            { question: "What is the adjective form of 'predict'?", answer: "predictable" },
            { question: "What is the noun form of 'participate'?", answer: "participation" },
            { question: "What is the adjective form of 'influence'?", answer: "influential" },
            { question: "What is the noun form of 'act'?", answer: "action" },
            { question: "What is the noun form of 'employ'?", answer: "employment" },
            { question: "What is the adjective form of 'compete'?", answer: "competitive" },
            // Synonym Exercises
            { question: "Give some synonyms to 'Important'.", answer: "vital" }, // The answer here is just for internal tracking, not displayed.
            { question: "Give some synonyms to 'Interesting'.", answer: "fascinating" },
            { question: "Give some synonyms to 'Tired'.", answer: "weary" },
            { question: "Give some synonyms to 'Sad'.", answer: "unhappy" },
            { question: "Give some synonyms to 'Happy'.", answer: "glad" }
        ];

        const rewards = [
            "� A delicious candy!",
            "🍰 A tasty slice of cake!",
            "🍬 A handful of assorted candies!",
            "🧁 A sweet cupcake!",
            "🍫 A yummy chocolate bar!",
            "🍪 A giant cookie!",
            "🍩 A glazed donut!",
            "🍦 A scoop of ice cream!",
            "🍎 A fresh apple (it's a sweet reward for health!)",
            "🍓 A bowl of fresh berries!"
        ];

        const punishments = [
            "🚫 Oh no! You owe 5 minutes of extra homework.",
            "❌ Incorrect! You lose 5 virtual points."
        ];

        // Game state variables
        let presents = []; // Stores details for each present (exercise, outcome)
        let currentPresentIndex = null; // Index of the currently selected present
        let presentsOpened = new Set(); // Stores indices of opened presents

        // DOM elements
        const presentsGrid = document.getElementById('presents-grid');
        const exerciseDisplay = document.getElementById('exercise-display');
        const revealOutcomeButton = document.getElementById('reveal-outcome-button');
        const feedbackDisplay = document.getElementById('feedback-display');
        const resetButton = document.getElementById('reset-button');

        /**
         * Shuffles an array randomly using the Fisher-Yates algorithm.
         * @param {Array} array - The array to shuffle.
         * @returns {Array} The shuffled array.
         */
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]]; // Swap elements
            }
            return array;
        }

        /**
         * Initializes the game by setting up presents and UI.
         */
        function initializeGame() {
            // Combine rewards and punishments, then shuffle them
            let outcomes = shuffleArray([...rewards, ...punishments]);

            // Ensure exercises are also shuffled to vary the challenge
            let shuffledExercises = shuffleArray([...exercises]);

            presents = []; // Clear previous presents
            presentsOpened.clear(); // Clear opened presents set
            presentsGrid.innerHTML = ''; // Clear present boxes from UI
            currentPresentIndex = null; // Reset current present

            // Create 12 presents, assigning a unique exercise and outcome to each
            for (let i = 0; i < 12; i++) {
                presents.push({
                    exercise: shuffledExercises[i], // Assign a unique shuffled exercise
                    outcome: outcomes[i]
                });

                // Create present box HTML element
                const presentBox = document.createElement('div');
                presentBox.id = `present-${i}`;
                presentBox.dataset.index = i; // Store index for easy access
                presentBox.className = 'present-box relative w-full aspect-square flex items-center justify-center text-white'; // Removed rounded-lg here as it's in style
                presentBox.innerHTML = `
                    <div class="ribbon-h"></div>
                    <div class="ribbon-v"></div>
                    <div class="bow"></div>
                    <span>${i + 1}</span>
                `;
                presentsGrid.appendChild(presentBox);

                // Add click listener to each present box
                presentBox.addEventListener('click', handlePresentClick);
            }

            // Reset UI elements
            exerciseDisplay.textContent = "Click a present to reveal your challenge!";
            feedbackDisplay.textContent = '';
            revealOutcomeButton.disabled = true; // Disable reveal button until a present is clicked
            feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold'; // Reset class
        }

        /**
         * Handles clicks on present boxes.
         * @param {Event} event - The click event.
         */
        function handlePresentClick(event) {
            const presentBox = event.currentTarget;
            const index = parseInt(presentBox.dataset.index);

            // Prevent opening an already opened present
            if (presentsOpened.has(index)) {
                feedbackDisplay.textContent = "This present has already been opened!";
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold text-yellow-600';
                return;
            }

            // If a present is already selected and not yet solved, show feedback
            if (currentPresentIndex !== null && !presentsOpened.has(currentPresentIndex)) {
                feedbackDisplay.textContent = "Please reveal the outcome for the current exercise first!";
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold text-red-600';
                return;
            }

            currentPresentIndex = index;
            exerciseDisplay.textContent = presents[currentPresentIndex].exercise.question;
            feedbackDisplay.textContent = 'Solve this exercise and click "Reveal Outcome" to see what\'s inside!'; // Clear previous feedback
            feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold text-blue-700';
            revealOutcomeButton.disabled = false; // Enable reveal button
        }

        /**
         * Handles the "Reveal Outcome" button click.
         */
        function handleRevealOutcome() {
            if (currentPresentIndex === null || presentsOpened.has(currentPresentIndex)) {
                feedbackDisplay.textContent = "Please select an unopened present first!";
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold text-red-600';
                return;
            }

            const presentBox = document.getElementById(`present-${currentPresentIndex}`);
            presentsOpened.add(currentPresentIndex); // Mark as opened
            presentBox.classList.add('opened'); // Change visual style
            presentBox.removeEventListener('click', handlePresentClick); // Disable further clicks

            const outcome = presents[currentPresentIndex].outcome;
            feedbackDisplay.textContent = `Outcome Revealed: ${outcome}`;

            // Apply specific styling based on outcome (reward or punishment)
            if (rewards.includes(outcome)) {
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold reward-text';
            } else {
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold punishment-text';
            }

            // Reset for next challenge
            exerciseDisplay.textContent = "Great job! Pick another present.";
            revealOutcomeButton.disabled = true; // Disable reveal button

            // Check if all presents are opened
            if (presentsOpened.size === 12) {
                feedbackDisplay.textContent = "All presents opened! Game Over. Click Reset to play again.";
                feedbackDisplay.className = 'message-box mt-4 text-center text-lg font-bold text-green-700';
            }
            currentPresentIndex = null; // Clear current present as its outcome is revealed
        }

        // Event listeners for buttons
        revealOutcomeButton.addEventListener('click', handleRevealOutcome);
        resetButton.addEventListener('click', initializeGame);

        // Initialize the game when the window loads
        window.onload = initializeGame;
    </script>
</body>
</html>
�
